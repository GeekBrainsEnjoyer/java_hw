Для домашнего задания за номером 6 "Принципы SOLID"

У меня получилось так, что домашние задания с 1 по 4, которые по идее, должны быть одним проектом, разделиилсь на два: Market, VendingMachine.
Домашние задания в этих папках. 
Как их изправить или объединить я не знаю, и у меня чувство, что это много работы.
Поэтому, выполняя 6 дз, для большей ясности, коментарии будут дублироваться в этом файле.

1. Принцип единой ответственности.
- (Market/Order/validateOrder) Тут проблема в том, что в классе есть методы, создающие его. Это нарушает принцип единой ответственности.
Оптимально, как мне кажется, надо этот метод добавить в отдельный интерфейс, и уже этот интерфейс имплементировать
к другим классам, которые эта функция потребуется. 

2. Принцип открытости-закрытости.
- в данном коде плохо реализован этот принцип. Если появится необходимость как-то раширить функционал нашего маркета или торгового автомата,
надо будет менять уже существующие классы, а не наследовать и имплементировать. Решить это проблему помогло бы создание интерфейсов и перенос 
в них, некоторых функций. Но каких функция, чтобы это было удобно, мне пока сложно сообразить.

3. Принцип подстановки Барбары Лисков.
- это принцип, вроде бы, реализуется в данном коде.
- (VendingMachine) У нас есть абстракный класс Product, от него наследует классы Beverage и Food. А от класса Beverage наследует HotBeverage.
если нам понадобиться торговый автомат с только горячими напитками, то для этого в данный программе есть класс HotBeverageVendingMachin, но 
мы могли бы сделать тоже самое просто типизировав простой торгоывый автомат(VendingMachine<HotBeverage>), и все бы работало.

4. Принцип разделения интерфейсов.
- этот принцип лохо реализован, потому что в VendingMachine почти нет интерфейсов, а в Market все методы из интерфейсов не реализуются в классах.

5. Принцип инверсии зависимостей.
- (VendingMachine) этот принцип сохраняется и подставив в Program в момент объвления класса в VendingMachine вместо Product любого его наследника, программа
корректно это обработает. 